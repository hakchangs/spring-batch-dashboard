<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Login - Spring Batch Dashboard</title>
  <style>
    /* Reset and base styles */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    :root {
      /* Light mode variables */
      --bg-color: #f9fafb;
      --card-bg: white;
      --text-color: #111827;
      --border-color: #e5e7eb;
      --input-border: #d1d5db;
      --input-bg: white;
      --label-color: #374151;
      --error-bg: #fee2e2;
      --error-border: #ef4444;
      --error-text: #b91c1c;

      /* Primary color palette */
      --primary-50: #f7fee7;
      --primary-100: #ecfccb;
      --primary-200: #d9f99d;
      --primary-300: #bef264;
      --primary-400: #a3e635;
      --primary-500: #84cc16;
      --primary-600: #65a30d;
      --primary-700: #4d7c0f;
      --primary-800: #3f6212;
      --primary-900: #365314;

      /* Gray palette */
      --gray-50: #f9fafb;
      --gray-100: #f3f4f6;
      --gray-200: #e5e7eb;
      --gray-300: #d1d5db;
      --gray-400: #9ca3af;
      --gray-500: #6b7280;
      --gray-600: #4b5563;
      --gray-700: #374151;
      --gray-800: #1f2937;
      --gray-900: #111827;
    }

    /* Dark Mode Styles */
    .dark-mode {
      --bg-color: #111827; /* dark:bg-gray-900 */
      --card-bg: #1f2937; /* dark:bg-gray-800 */
      --text-color: #f9fafb; /* dark:text-white */
      --border-color: #374151; /* dark:border-gray-700 */
      --input-border: #4b5563; /* dark:border-gray-600 */
      --input-bg: #374151; /* dark:bg-gray-700 */
      --label-color: #e5e7eb; /* dark:text-gray-200 */
      --error-bg: #7f1d1d; /* dark:bg-red-900 */
      --error-border: #b91c1c; /* dark:border-red-800 */
      --error-text: #fca5a5; /* dark:text-red-300 */
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
      background-color: var(--bg-color);
      color: var(--text-color);
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      transition: background-color 0.3s ease, color 0.3s ease;
    }

    /* Layout */
    .container {
      flex: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 3rem 1rem;
    }

    .login-wrapper {
      width: 100%;
      max-width: 36rem; /* Increased from 28rem to 36rem */
    }

    .login-card {
      width: 100%;
      background-color: var(--card-bg);
      border-radius: 0.5rem;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
      overflow: hidden;
      transition: background-color 0.3s ease;
    }

    /* Header */
    .card-header {
      height: 4rem;
      display: flex;
      align-items: center;
      padding: 0 1.5rem;
      border-bottom: 1px solid var(--border-color);
      transition: border-color 0.3s ease;
    }

    .app-name {
      font-size: 1.125rem; /* Adjusted to match React app's font size */
      font-weight: 600;
      color: var(--primary-600);
    }

    /* Form content */
    .card-body {
      padding: 2rem; /* Increased padding from 1.5rem to 2rem */
    }

    .login-title {
      font-size: 1.5rem; /* Adjusted to match React app's h1 size */
      font-weight: 700;
      color: var(--text-color);
      margin-bottom: 1.5rem; /* Increased from 1rem to 1.5rem */
      transition: color 0.3s ease;
    }

    .form-container {
      display: flex;
      flex-direction: column;
      gap: 1.25rem; /* Increased from 1rem to 1.25rem */
    }

    .error-alert {
      background-color: var(--error-bg);
      border: 1px solid var(--error-border);
      color: var(--error-text);
      padding: 0.75rem 1rem;
      border-radius: 0.375rem;
      margin-bottom: 1rem;
      font-size: 0.875rem; /* Adjusted to match React app's alert text size */
      display: none;
      transition: background-color 0.3s ease, border-color 0.3s ease, color 0.3s ease;
    }

    .error-alert.visible {
      display: block;
    }

    .form-group {
      display: flex;
      flex-direction: column;
      gap: 0.375rem; /* Increased from 0.25rem to 0.375rem */
    }

    .form-label {
      font-size: 0.875rem; /* Standard size for form labels in the React app */
      font-weight: 500;
      color: var(--label-color);
      margin-bottom: 0.25rem;
      transition: color 0.3s ease;
    }

    .form-input {
      padding: 0.5rem 0.75rem; /* Adjusted to match React app's input padding */
      border: 1px solid var(--input-border);
      border-radius: 0.375rem;
      font-size: 0.875rem; /* Adjusted to match React app's input font size */
      line-height: 1.5;
      width: 100%;
      background-color: var(--input-bg);
      color: var(--text-color);
      box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
      transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out,
      background-color 0.3s ease, color 0.3s ease;
    }

    .form-input:focus {
      outline: none;
      border-color: var(--primary-500);
      box-shadow: 0 0 0 3px rgba(132, 204, 22, 0.2);
    }

    .form-input::placeholder {
      color: var(--gray-400);
    }

    .checkbox-group {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .checkbox-input {
      height: 1rem;
      width: 1rem;
      border-radius: 0.25rem;
      border: 1px solid var(--input-border);
      accent-color: var(--primary-600);
      transition: border-color 0.3s ease;
    }

    .checkbox-label {
      font-size: 0.75rem; /* Adjusted to match React app's smaller text */
      color: var(--label-color);
      transition: color 0.3s ease;
    }

    /* Theme toggle button */
    .theme-toggle {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: none;
      border: none;
      color: var(--text-color);
      font-size: 0.875rem;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.5rem;
      border-radius: 0.375rem;
      transition: background-color 0.3s ease, color 0.3s ease;
    }

    .theme-toggle:hover {
      background-color: rgba(0, 0, 0, 0.05);
    }

    .dark-mode .theme-toggle:hover {
      background-color: rgba(255, 255, 255, 0.1);
    }

    .submit-button {
      display: inline-block;
      width: 100%;
      padding: 0.5rem 1rem; /* Adjusted to match React app's button padding */
      background-color: var(--primary-600);
      color: white;
      font-size: 0.875rem; /* Kept to match React app's button text */
      font-weight: 500;
      text-align: center;
      border: none;
      border-radius: 0.375rem;
      cursor: pointer;
      transition: background-color 0.15s ease-in-out;
      margin-top: 0.5rem;
    }

    .submit-button:hover {
      background-color: var(--primary-700);
    }

    .submit-button:focus {
      outline: none;
      box-shadow: 0 0 0 3px rgba(132, 204, 22, 0.3);
    }
  </style>
</head>
<body>
<div class="container">
  <button id="theme-toggle" class="theme-toggle" aria-label="Toggle dark mode">
    <svg id="moon-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16"
         viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
         stroke-linecap="round" stroke-linejoin="round" style="display: block;">
      <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
    </svg>
    <svg id="sun-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24"
         fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
         stroke-linejoin="round" style="display: none;">
      <circle cx="12" cy="12" r="5"></circle>
      <line x1="12" y1="1" x2="12" y2="3"></line>
      <line x1="12" y1="21" x2="12" y2="23"></line>
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
      <line x1="1" y1="12" x2="3" y2="12"></line>
      <line x1="21" y1="12" x2="23" y2="12"></line>
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
    </svg>
  </button>
  <div class="login-wrapper">
    <div class="login-card">
      <!-- Header -->
      <div class="card-header">
        <span class="app-name">Spring Batch Dashboard</span>
      </div>

      <!-- Login Form -->
      <div class="card-body">
        <h2 class="login-title">Login</h2>

        <form action="/login" method="POST" class="form-container">
          {{#springMacroRequestContext.request.parameterMap.error}}
            <div id="error-message" class="error-alert visible">
              <span>{{SPRING_SECURITY_LAST_EXCEPTION}}</span>
            </div>
          {{/springMacroRequestContext.request.parameterMap.error}}

          <div class="form-group">
            <label for="username" class="form-label">Username</label>
            <input
                type="text"
                id="username"
                name="username"
                required
                class="form-input"
                placeholder="Enter your username"
            />
          </div>

          <div class="form-group">
            <label for="password" class="form-label">Password</label>
            <input
                type="password"
                id="password"
                name="password"
                required
                class="form-input"
                placeholder="Enter your password"
            />
          </div>

          <div class="checkbox-group">
            <input
                id="remember-me"
                name="remember-me"
                type="checkbox"
                class="checkbox-input"
            />
            <label for="remember-me" class="checkbox-label">
              Remember me
            </label>
          </div>

          <div>
            {{#_csrf}}
              <input type="hidden" name="_csrf" value="{{_csrf.token}}"/>
            {{/_csrf}}
            <button
                type="submit"
                class="submit-button"
            >
              Login
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<script>
  // DOM Content Loaded event
  document.addEventListener('DOMContentLoaded', () => {
    // Dark mode toggle functionality
    const themeToggle = document.getElementById('theme-toggle');
    const moonIcon = document.getElementById('moon-icon');
    const sunIcon = document.getElementById('sun-icon');

    // Check for saved theme preference or preferred color scheme
    const savedTheme = localStorage.getItem('theme');
    const prefersDark = window.matchMedia
        && window.matchMedia('(prefers-color-scheme: dark)').matches;

    // Apply theme based on saved preference or system preference
    if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
      document.body.classList.add('dark-mode');
      moonIcon.style.display = 'none';
      sunIcon.style.display = 'block';
    }

    // Toggle theme when button is clicked
    themeToggle.addEventListener('click', () => {
      document.body.classList.toggle('dark-mode');
      const isDarkMode = document.body.classList.contains('dark-mode');

      // Update icons
      moonIcon.style.display = isDarkMode ? 'none' : 'block';
      sunIcon.style.display = isDarkMode ? 'block' : 'none';

      // Save preference
      localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');
    });
  });
</script>
</body>
</html>